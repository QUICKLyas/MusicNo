"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("mongodb");function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=t(e);function s(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}Object.defineProperty(exports,"MongoClient",{enumerable:!0,get:function(){return e.MongoClient}}),exports.MongoSessionDaemon=class{constructor(e,t={}){s(this,"url",void 0),s(this,"destroyed",void 0),s(this,"connected",void 0),s(this,"connectingPromise",void 0),s(this,"session",void 0),s(this,"connectError",void 0),s(this,"options",void 0),this.url=e,this.destroyed=!1,this.connected=!1,this.createSession(),this.options={...t,debug:!1,reconnectInterval:5e3}}createSession(){this.destroyed||(this.connectingPromise=new Promise(async e=>{let t=!1,s=null,n=null;n=()=>{t||(this.session.removeListener("error",s),t=!0,this.connected=!0,delete this.connectingPromise,delete this.connectError,this.keepSession(),this.options.debug&&console.log("[mongo client] connected."),e())},s=o=>{t||(this.session&&this.session.removeListener("connect",n),t=!0,this.connected=!1,delete this.connectingPromise,this.connectError=o,setTimeout(()=>{this.options.debug&&console.log("Connect failed, reconnect after 5 seconds."),this.createSession()},this.options.reconnectInterval),e())};try{this.session=await o.default.connect(this.url,{useUnifiedTopology:!0}),n()}catch(e){return void s(e)}}))}keepSession(){const e=setInterval(()=>{},this.options.reconnectInterval-10);this.session.once("close",()=>{clearInterval(e),this.options.debug&&!this.destroyed&&console.log("[mongo client] lost connection, reconnect immeditly"),this.session.removeAllListeners(),this.createSession()}),this.session.once("error",()=>{this.options.debug&&console.log("[mongodb client] session received an error event"),this.session.close()})}async getSession(){return await this.ok(),this.session}async ok(){if(this.connectingPromise&&await this.connectingPromise,this.connectError)throw this.connectError}async destroy(){this.destroyed=!0,await new Promise(e=>{let t=!1;this.session.close(()=>{t||(t=!0,e())}),setTimeout(()=>{t||(t=!0,e())},1e3)})}};
